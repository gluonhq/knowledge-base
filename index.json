[{"uri":"http://gluonhq.github.io/knowledge-base/","title":"Gluon Knowledge Base","tags":[],"description":"","content":"Introduction Gluon has been a pioneer of Java client technology. We are extremely proud to be participating in development of various technologies including OpenJFX, GraalVM etc.\n"},{"uri":"http://gluonhq.github.io/knowledge-base/javafx/","title":"JavaFX","tags":[],"description":"","content":"JavaFX This section contains articles related to JavaFX.\n"},{"uri":"http://gluonhq.github.io/knowledge-base/javafx/packaging/","title":"Packaging","tags":[],"description":"","content":"Packaging Using jpackage, a Java/FX application can easily be transformed into a package/installer in a platform-specific format. The approach discussed in this section results in a package that comes with a bundled Java Virtual Machine (JVM) and a set of Java Modules that are needed to run the application. This is different from the approach where the gluonfx plugin is used to create a native image that does not contain a JVM or the required modules, as those are compiled ahead of time (AOT) into the executable.\nLinking First, find the modules used in the application. This can be done using jdeps command:\ndetected_modules=`$JAVA_HOME/bin/jdeps \\ -q \\ --multi-release ${JAVA_VERSION} \\ --ignore-missing-deps \\ --print-module-deps \\ --class-path \u0026quot;target/installer/input/libs/*\u0026quot; \\ target/classes/${MAIN_CLASS}.class` echo $detected_modules Apart from those detected modules, any additional modules can be specified manually:\nmanual_modules=jdk.crypto.ec,jdk.localedata Next, a runtime containing these modules can be created by using the jlink command:\n$JAVA_HOME/bin/jlink \\ --strip-native-commands \\ --no-header-files \\ --no-man-pages \\ --compress=2 \\ --strip-debug \\ --add-modules \u0026quot;${detected_modules},${manual_modules}\u0026quot; \\ --include-locales=en \\ --output target/java-runtime Packaging The following command creates a packaged application (or installer bundle) for the platform:\n$JAVA_HOME/bin/jpackage \\ --dest target/installer \\ --input target/installer/input/libs \\ --name ${APP_NAME} \\ --main-class ${MAIN_CLASS} \\ --main-jar ${MAIN_JAR} \\ --java-options -Xmx2048m \\ --runtime-image target/java-runtime \\ --icon ${ICON_PATH} \\ --app-version ${APP_VERSION} \\ --vendor \u0026quot;Gluon\u0026quot; \\ --copyright \u0026quot;Copyright © 2021 Gluon\u0026quot; \\ --type ${INSTALLER_TYPE} If you want to test the bundle without creating an installer, you can specify the type to be a app-image as shown below:\n$JAVA_HOME/bin/jpackage \\ --dest target/installer \\ --input target/installer/input/libs \\ --name ${APP_NAME} \\ --main-class ${MAIN_CLASS} \\ --main-jar ${MAIN_JAR} \\ --java-options -Xmx2048m \\ --runtime-image target/java-runtime \\ --icon ${ICON_PATH} \\ --app-version ${APP_VERSION} \\ --vendor \u0026quot;Gluon\u0026quot; \\ --copyright \u0026quot;Copyright © 2021 Gluon\u0026quot; \\ --type app-image jpackage comes with an array of options, many of which are platform specific. Use the --help command to print a list of valid options for the current platform:\njpackage --help "},{"uri":"http://gluonhq.github.io/knowledge-base/native-image/","title":"Native Image","tags":[],"description":"","content":"Native Image This section contains articles related to Native Image via [Gluon Substrate] using GluonFX Maven and GluonFX Gradle plugins.\n"},{"uri":"http://gluonhq.github.io/knowledge-base/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"http://gluonhq.github.io/knowledge-base/tags/","title":"Tags","tags":[],"description":"","content":""}]